<!DOCTYPE html>
<!-- saved from url=(0085)https://gitpitch.com/cypress-io/testing-workshop-cypress?p=slides/11-retry-ability#/1 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport">
    <title>GitPitch Markdown</title>
    <meta name="description" content="Slide Decks for Tech Conferences, Training, Developer Advocates, and Educators">
    <meta name="keywords" content="Markdown, Presentation, Slides, Developer">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    
    <meta name="‚Äùrobots‚Äù" content="‚Äùnoindex,nofollow‚Äù">
    
    

<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@gitpitch">
<meta name="twitter:title" content="GitPitch Markdown">
<meta name="twitter:description" content="The perfect slide deck solution for Tech Conferences, Training, Developer Advocates, and Educators.">
<meta name="twitter:image" content="https://gitpitch.com/assets/img/gitpitch-40-splash.png">


    

<meta property="og:site_name" content="GitPitch">
<meta property="og:type" content="article">
<meta property="og:title" content="GitPitch Markdown">
<meta property="og:description" content="The perfect slide deck solution for Tech Conferences, Training, Developer Advocates, and Educators.">
<meta property="og:image" content="https://gitpitch.com/assets/img/gitpitch-40-splash.png">
<meta property="og:url" content="https://gitpitch.com/cypress-io/testing-workshop-cypress/master?grs=github&amp;t=template&amp;p=slides%2F11-retry-ability">


    

<link rel="alternate" type="application/json+oembed" href="https://gitpitch.com/pitchme/oembed?url=https%3A%2F%2Fgitpitch.com%2Fcypress-io%2Ftesting-workshop-cypress%2Fmaster%3Fgrs%3Dgithub%26t%3Dtemplate%26p%3Dslides%252F11-retry-ability&amp;format=json" title="GitPitch - Markdown Presentations for Everyone on Git">
<link rel="alternate" type="text/xml+oembed" href="https://gitpitch.com/pitchme/oembed?url=https%3A%2F%2Fgitpitch.com%2Fcypress-io%2Ftesting-workshop-cypress%2Fmaster%3Fgrs%3Dgithub%26t%3Dtemplate%26p%3Dslides%252F11-retry-ability&amp;format=xml" title="GitPitch - Markdown Presentations for Everyone on Git">


    
    
    <link rel="apple-touch-icon" sizes="120x120" href="https://gitpitch.com/assets/img/favicon/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="https://gitpitch.com/assets/img/favicon/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="https://gitpitch.com/assets/img/favicon/favicon-16x16.png">
    
    
    
<link href="./Retry-ability_files/reveal.css" rel="stylesheet" type="text/css">

<link href="./Retry-ability_files/moon.css" rel="stylesheet" type="text/css" id="theme">
<link href="./Retry-ability_files/future.css" rel="stylesheet" type="text/css">


<link href="./Retry-ability_files/title-footer-mod.css" rel="stylesheet" type="text/css" id="theme">

<link href="./Retry-ability_files/paper.css" rel="stylesheet" type="text/css">


<link href="./Retry-ability_files/atom-one-light.css" rel="stylesheet" type="text/css">
<link href="./Retry-ability_files/octicons.css" rel="stylesheet" type="text/css">
<link href="./Retry-ability_files/fa-all.min.css" rel="stylesheet" type="text/css">
<link href="./Retry-ability_files/fa-v4-shims.min.css" rel="stylesheet" type="text/css">

<link href="./Retry-ability_files/pitchcore.css" rel="stylesheet" type="text/css">




<link href="./Retry-ability_files/pitch.css" rel="stylesheet" type="text/css">

<link href="./Retry-ability_files/pitchmenu.css" rel="stylesheet" type="text/css">


<link href="./Retry-ability_files/menu.css" rel="stylesheet" type="text/css">



<link href="./Retry-ability_files/pitchbardark.css" rel="stylesheet" type="text/css">


<link href="./Retry-ability_files/pitchcode.css" rel="stylesheet" type="text/css">



<link href="./Retry-ability_files/css" rel="stylesheet">



    
    

<style>
.half-image img {
  width: 40%;
}

</style>


    <link href="./Retry-ability_files/pitchpost.css" rel="stylesheet" type="text/css">
    

    
        
            

<script async="" src="./Retry-ability_files/analytics.js"></script><script async="" src="./Retry-ability_files/analytics.js"></script><script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  
  ga('create', 'UA-80973712-1', 'auto');
  ga('send', 'pageview');
  
</script>


        
        
            

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  
  ga('create', 'UA-59606812-9', 'auto', 'gpu');
  ga('gpu.send', 'pageview');
  
</script><script type="text/javascript" src="./Retry-ability_files/marked.js"></script><script type="text/javascript" src="./Retry-ability_files/markdown.js"></script><script type="text/javascript" src="./Retry-ability_files/menu.js"></script><script type="text/javascript" src="./Retry-ability_files/highlight.js"></script><script type="text/javascript" src="./Retry-ability_files/reveal-code-focus-30.js"></script>


        
    


</head>
<body>
    


    <div class="reveal none center has-vertical-slides has-horizontal-slides ready" role="application" data-transition-speed="default" data-background-transition="none" style="">
        <div class="slides" style="width: 960px; height: 700px; zoom: 1.13143;">
            
            <section data-charset="utf-8" style="top: 241px; display: block;" data-markdown="" data-markdown-parsed="true" data-background="white" class="has-light-background past" hidden="" aria-hidden="true"><!-- -->
<div style="padding-top: 0px; font-size: 36px;" class="font-ubuntu-heavy text-pink text-bold">
<p style="color: #5289F7; font-weight: bold;">GitPitch.com is shutting down.<br>This slide deck will no longer<br>be available from March 1, 2021. </p></div>
</section><section data-charset="utf-8" style="top: 0px; display: block;" class="stack present"><section data-markdown="" data-markdown-parsed="true" style="top: 145.5px; display: block;" class="present"><h2 id="-part-11-retry-ability">‚òÄÔ∏è Part 11: Retry-ability</h2>
<h3 id="-you-will-learn">üìö You will learn</h3>
<ul>
<li>deep dive into assertions</li>
<li>built-in command waits</li>
<li>retry-ability üîë</li>
</ul>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 250.5px; display: block;" hidden=""><ul>
<li>keep <code>todomvc</code> app running</li>
<li>open <code>cypress/integration/11-retry-ability/spec.js</code></li>
</ul>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 152px; display: block;" hidden=""><h2 id="todo-finish-the-test-shows-ul-">Todo: finish the test "shows UL"</h2>
<pre><code class="hljs lang- livecodeserver"><span class="line"><span class="line-number"></span><span class="hljs-keyword">it</span>(<span class="hljs-string">'shows list of items'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> () {</span></span><span class="line"><span class="line-number"></span> <span class="hljs-comment"> // ...</span></span><span class="line"><span class="line-number"></span>  cy.<span class="hljs-keyword">contains</span>(<span class="hljs-string">'ul'</span>, <span class="hljs-string">'todo A'</span>)</span><span class="line"><span class="line-number"></span> <span class="hljs-comment"> // confirm that the above element</span></span><span class="line"><span class="line-number"></span> <span class="hljs-comment"> //  1. is visible</span></span><span class="line"><span class="line-number"></span> <span class="hljs-comment"> //  2. has class "todo-list"</span></span><span class="line"><span class="line-number"></span> <span class="hljs-comment"> //  3. css property "list-style-type" is equal "none"</span></span><span class="line"><span class="line-number"></span>})</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>Most assertions I write are BDD</p>
<pre><code class="hljs lang- stylus"><span class="line"><span class="line-number"></span>cy.contains(<span class="hljs-string">'ul'</span>, <span class="hljs-string">'todo A'</span>).should(<span class="hljs-string">'be.visible'</span>)</span><span class="line"><span class="line-number"></span><span class="hljs-function"><span class="hljs-title">expect</span><span class="hljs-params">(<span class="hljs-variable">$el</span>)</span></span><span class="hljs-selector-class">.to</span><span class="hljs-selector-class">.have</span><span class="hljs-selector-class">.prop</span>(<span class="hljs-string">'disabled'</span>, false)</span></code></pre>


<p><a href="https://on.cypress.io/assertions#BDD-Assertions" rel="noopener noreferrer" target="_blank">on/assertions#BDD-Assertions</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>1, 2, or 3 arguments</p>
<pre><code class="hljs lang- sml"><span class="line"><span class="line-number"></span>.should(<span class="hljs-symbol">'be</span>.visible')</span><span class="line"><span class="line-number"></span>.should(<span class="hljs-symbol">'have</span>.class', <span class="hljs-symbol">'todo</span>-list')</span><span class="line"><span class="line-number"></span>.should(<span class="hljs-symbol">'have</span>.css', <span class="hljs-symbol">'list</span>-style-type', <span class="hljs-symbol">'none'</span>)</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="there-is-intellisense">There is IntelliSense</h2>
<p><img src="./Retry-ability_files/assertion-intellisense.png" title="" alt="BDD IntelliSense" class="BDD IntelliSense" style="width: auto;height: auto;" data-image-key="-4864317702389187668"></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>‚ö†Ô∏è straight Chai IntelliSense is not so good</p>
<p><img src="./Retry-ability_files/chai-intellisense.png" title="" alt="Chai assertion IntelliSense" class="Chai assertion IntelliSense" style="width: auto;height: auto;" data-image-key="2309309968409414933"></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>If you must, there are TDD assertions like</p>
<pre><code class="hljs lang- reasonml"><span class="line"><span class="line-number"></span><span class="hljs-keyword">assert</span>.equal(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, 'values are equal')</span><span class="line"><span class="line-number"></span><span class="hljs-keyword">assert</span>.is<span class="hljs-constructor">True(<span class="hljs-params">true</span>, '<span class="hljs-params">this</span> <span class="hljs-params">value</span> <span class="hljs-params">is</span> <span class="hljs-params">true</span>')</span></span></code></pre>


<p><a href="https://on.cypress.io/assertions#TDD-Assertions" rel="noopener noreferrer" target="_blank">on/assertions#TDD-Assertions</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="todo-bdd-vs-tdd">Todo: BDD vs TDD</h2>
<p>Finish test "shows UL - TDD"</p>
<pre><code class="hljs lang- awk"><span class="line"><span class="line-number"></span>it(<span class="hljs-string">'shows UL - TDD'</span>, <span class="hljs-keyword">function</span> () {</span><span class="line"><span class="line-number"></span>  cy.contains(<span class="hljs-string">'ul'</span>, <span class="hljs-string">'todo A'</span>).then(<span class="hljs-variable">$ul</span> =&gt; {</span><span class="line"><span class="line-number"></span>    <span class="hljs-regexp">//</span> use TDD assertions</span><span class="line"><span class="line-number"></span>    <span class="hljs-regexp">//</span> <span class="hljs-variable">$ul</span> is visible</span><span class="line"><span class="line-number"></span>    <span class="hljs-regexp">//</span> <span class="hljs-variable">$ul</span> has class <span class="hljs-string">"todo-list"</span></span><span class="line"><span class="line-number"></span>    <span class="hljs-regexp">//</span> <span class="hljs-variable">$ul</span> css has <span class="hljs-string">"list-style-type"</span> = <span class="hljs-string">"none"</span></span><span class="line"><span class="line-number"></span>  })</span><span class="line"><span class="line-number"></span>})</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="-i-class-fa-fa-question-aria-hidden-true-do-you-see-the-difference-i-"><i class="fa fa-question" aria-hidden="true"> do you see the difference?</i></h2>
<p>Which style do you prefer?</p>
<p>‚ö†Ô∏è <a href="https://on.cypress.io/assertions#Chai-jQuery" rel="noopener noreferrer" target="_blank">Chai-jQuery</a> and <a href="https://on.cypress.io/assertions#Sinon-Chai" rel="noopener noreferrer" target="_blank">Sinon-Chai</a> are only available in BDD mode.</p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="bdd">BDD</h2>
<p><img src="./Retry-ability_files/bdd.png" title="" alt="BDD log" class="BDD log" style="width: auto;height: auto;" data-image-key="-8129248343852169499"></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="tdd">TDD</h2>
<p><img src="./Retry-ability_files/tdd.png" title="" alt="TDD log" class="TDD log" style="width: auto;height: auto;" data-image-key="2246333698954202158"></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="what-if-you-need-more-complex-assertions-">What if you need more complex assertions?</h2>
<p>Write you own <a href="http://on.cypress.io/should#Function" rel="noopener noreferrer" target="_blank">should(cb)</a> assertion</p>
<pre><code class="hljs lang- stylus"><span class="line"><span class="line-number"></span>cy.get(<span class="hljs-string">'.docs-header'</span>).find(<span class="hljs-string">'div'</span>)</span><span class="line"><span class="line-number"></span>  .should((<span class="hljs-variable">$div</span>) =&gt; {</span><span class="line"><span class="line-number"></span>    expect(<span class="hljs-variable">$div</span>)<span class="hljs-selector-class">.to</span><span class="hljs-selector-class">.have</span><span class="hljs-selector-class">.length</span>(<span class="hljs-number">1</span>)</span><span class="line"><span class="line-number"></span>    const className = <span class="hljs-variable">$div</span>[<span class="hljs-number">0</span>]<span class="hljs-selector-class">.className</span></span><span class="line"><span class="line-number"></span>    expect(className)<span class="hljs-selector-class">.to</span><span class="hljs-selector-class">.match</span>(/heading-/)</span><span class="line"><span class="line-number"></span>  })</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="todo-write-complex-assertion">Todo: write complex assertion</h2>
<pre><code class="hljs lang- javascript"><span class="line"><span class="line-number"></span>it(<span class="hljs-string">'every item starts with todo'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><span class="line"><span class="line-number"></span>  <span class="hljs-comment">// ...</span></span><span class="line"><span class="line-number"></span>  cy.get(<span class="hljs-string">'.todo label'</span>).should(<span class="hljs-function"><span class="hljs-params">$labels</span> =&gt;</span> {</span><span class="line"><span class="line-number"></span>    <span class="hljs-comment">// confirm that there are 4 labels</span></span><span class="line"><span class="line-number"></span>    <span class="hljs-comment">// and that each one starts with "todo-"</span></span><span class="line"><span class="line-number"></span>  })</span><span class="line"><span class="line-number"></span>})</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="-should-cb-common-use-cases"><code>should(cb)</code> common use cases</h2>
<ul>
<li>dynamic data, like scoped class names</li>
<li>text between two cells is unknown but should be the same</li>
<li>displayed value should be the same as API has returned</li>
</ul>
<p><a href="https://example.cypress.io/commands/assertions" rel="noopener noreferrer" target="_blank">https://example.cypress.io/commands/assertions</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="-retry-ability">üîë Retry-ability</h2>
<blockquote>
<p>Key concept in Cypress, yet should go mostly unnoticed.</p>
</blockquote>
<aside class="notes"><p>Add link to retry-ability page when finished <a href="https://github.com/cypress-io/cypress-documentation/pull/1314" rel="noopener noreferrer" target="_blank">https://github.com/cypress-io/cypress-documentation/pull/1314</a></p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h3 id="commands-and-assertions">Commands and assertions</h3>
<pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">it</span>(<span class="hljs-string">'creates 2 items'</span>, function () {</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.visit</span>(<span class="hljs-string">'/'</span>)                       <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.focused</span>()                        <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>    <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'have.class'</span>, <span class="hljs-string">'new-todo'</span>) <span class="hljs-comment">// assertion</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.new-todo'</span>)                 <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>    <span class="hljs-selector-class">.type</span>(<span class="hljs-string">'todo A{enter}'</span>)            <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>    <span class="hljs-selector-class">.type</span>(<span class="hljs-string">'todo B{enter}'</span>)            <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.todo-list li'</span>)             <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>    <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'have.length'</span>, <span class="hljs-number">2</span>)         <span class="hljs-comment">// assertion</span></span><span class="line"><span class="line-number"></span>})</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h3 id="look-at-the-last-command-assertion">Look at the last command + assertion</h3>
<pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.todo-list li'</span>)     <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'have.length'</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// assertion</span></span></code></pre>


<p>Command <code>cy.get()</code> will be retried <em>until</em> the assertion <code>should('have.length', 2)</code> passes.</p>
<aside class="notes"><p>If not shown, this is a good moment to slow down the app and show how the assertion still works, especially when slowing down progressively - 1 item, slow down by 1 second, 2 items - slow down by 2 seconds.</p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>Command <code>cy.contains</code> will be retried <em>until 3 assertions</em> that follow it all pass.</p>
<pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.contains</span>(<span class="hljs-string">'ul'</span>, <span class="hljs-string">'todo A'</span>)                   <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'be.visible'</span>)                       <span class="hljs-comment">// assertion</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.and</span>(<span class="hljs-string">'have.class'</span>, <span class="hljs-string">'todo-list'</span>)             <span class="hljs-comment">// assertion</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.and</span>(<span class="hljs-string">'have.css'</span>, <span class="hljs-string">'list-style-type'</span>, <span class="hljs-string">'none'</span>) <span class="hljs-comment">// assertion</span></span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>Command <code>cy.get</code> will be retried <em>until 5 assertions</em> that follow it all pass.</p>
<pre><code class="hljs lang- stylus"><span class="line"><span class="line-number"></span>cy.get(<span class="hljs-string">'.todo label'</span>)                 <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>  .should(<span class="hljs-variable">$labels</span> =&gt; {</span><span class="line"><span class="line-number"></span>    expect(<span class="hljs-variable">$labels</span>)<span class="hljs-selector-class">.to</span><span class="hljs-selector-class">.have</span><span class="hljs-selector-class">.length</span>(<span class="hljs-number">4</span>) <span class="hljs-comment">// assertion</span></span><span class="line"><span class="line-number"></span>&nbsp;</span><span class="line"><span class="line-number"></span>    <span class="hljs-variable">$labels</span>.each((k, el) =&gt; {         <span class="hljs-comment">// 4 assertions</span></span><span class="line"><span class="line-number"></span>      expect(el.textContent)<span class="hljs-selector-class">.to</span><span class="hljs-selector-class">.match</span>(/^todo /)</span><span class="line"><span class="line-number"></span>    })</span><span class="line"><span class="line-number"></span>  })</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="retry-ability">Retry-ability</h2>
<p>Only some commands are retried: <code>cy.get</code>, <code>cy.find</code>, <code>its</code>. They don't change the application's state.</p>
<p>NOT retried: <code>cy.click</code>, <code>cy.task</code>, etc.</p>
<p><img src="./Retry-ability_files/retry.png" title="" alt="Assertions section" class="Assertions section" style="width: auto;height: auto;" data-image-key="8412154241663688318"></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="-then-cb-vs-should-cb-"><code>then(cb)</code> vs <code>should(cb)</code></h2>
<ul>
<li><code>should(cb)</code> retries</li>
<li><code>then(cb)</code> does not retry</li>
</ul>
<h3 id="todo-demonstrate-this">Todo: demonstrate this</h3>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="return-value-from-should-cb-">return value from <code>should(cb)</code></h2>
<p>Question: can you return value from <code>should(cb)</code>?</p>
<aside class="notes"><p><code>Should(cb)</code> does not return a value, it just passes along the value yielded by the command. If you need a value, first call <code>should(cb)</code> and then <code>then(cb)</code> to return it.</p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="automatic-waiting">Automatic Waiting</h2>
<p><img src="./Retry-ability_files/waiting.png" title="" alt="Waiting" class="Waiting" style="width: auto;height: auto;" data-image-key="-5200762419705272813"></p>
<p>Built-in assertion in most commands, even if they do not retry assertions that follow. <code>cy.click</code> cannot click a button if there is no button, or if it's disabled!</p>
<aside class="notes"><p>Just like a human user, Cypress tries to do sensible thing. Very rarely though you need to retry a command that is NOT retried by Cypress, in that case you can perform it yourself, see <a href="https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/" rel="noopener noreferrer" target="_blank">When Can the Test Click?</a></p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="timeouts">Timeouts</h2>
<p>By default, command retries for up to 4 seconds. You can change config setting <code>defaultCommandTimeout</code> globally.</p>
<pre><code class="hljs lang- routeros"><span class="line"><span class="line-number"></span>cypress <span class="hljs-builtin-name">run</span> --config <span class="hljs-attribute">defaultCommandTimeout</span>=10000</span></code></pre>


<p>‚ö†Ô∏è changing global command timeout is not recommended.</p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="timeouts">Timeouts</h2>
<p>Change timeout for a particular command</p>
<pre><code class="hljs lang- pgsql"><span class="line"><span class="line-number"></span>// w<span class="hljs-string">e've modified the timeout which affects</span></span><span class="line"><span class="line-number"></span><span class="hljs-string">// default + added assertions</span></span><span class="line"><span class="line-number"></span><span class="hljs-string">cy.get('</span>.mobile-nav<span class="hljs-string">', { timeout: 10000 })</span></span><span class="line"><span class="line-number"></span><span class="hljs-string">  .should('</span>be.visibl<span class="hljs-string">e')</span></span><span class="line"><span class="line-number"></span><span class="hljs-string">  .and('</span>contain<span class="hljs-string">', '</span>Hom<span class="hljs-string">e')</span></span></code></pre>


<p>See <a href="https://on.cypress.io/introduction-to-cypress#Timeouts" rel="noopener noreferrer" target="_blank">Timeouts</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><blockquote>
<p>‚ö†Ô∏è Only the last command is retried ‚ö†Ô∏è</p>
</blockquote>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h3 id="todo-write-test-that-checks-the-label">Todo: write test that checks the label</h3>
<p><img src="./Retry-ability_files/one-label.png" title="" alt="one label" class="one label" style="width: auto;height: auto;" data-image-key="-5701438068232986838"></p>
<p>‚å®Ô∏è test "has the right label"</p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">it</span>(<span class="hljs-string">'has the right label'</span>, () =&gt; {</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.new-todo'</span>)<span class="hljs-selector-class">.type</span>(<span class="hljs-string">'todo A{enter}'</span>)</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.todo-list li'</span>)         <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>    <span class="hljs-selector-class">.find</span>(<span class="hljs-string">'label'</span>)                <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>    <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'contain'</span>, <span class="hljs-string">'todo A'</span>)  <span class="hljs-comment">// assertion</span></span><span class="line"><span class="line-number"></span>})</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h3 id="todo-write-test-that-checks-two-labels">Todo: write test that checks two labels</h3>
<p><img src="./Retry-ability_files/two-labels.png" title="" alt="two labels" class="two labels" style="width: auto;height: auto;" data-image-key="2076040331789580231"></p>
<p>‚å®Ô∏è test "has two labels"</p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">it</span>(<span class="hljs-string">'has two labels'</span>, () =&gt; {</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.new-todo'</span>)<span class="hljs-selector-class">.type</span>(<span class="hljs-string">'todo A{enter}'</span>)</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.todo-list li'</span>) <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>    <span class="hljs-selector-class">.find</span>(<span class="hljs-string">'label'</span>) <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>    <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'contain'</span>, <span class="hljs-string">'todo A'</span>) <span class="hljs-comment">// assertion</span></span><span class="line"><span class="line-number"></span>&nbsp;</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.new-todo'</span>)<span class="hljs-selector-class">.type</span>(<span class="hljs-string">'todo B{enter}'</span>)</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.todo-list li'</span>) <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>    <span class="hljs-selector-class">.find</span>(<span class="hljs-string">'label'</span>) <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>    <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'contain'</span>, <span class="hljs-string">'todo B'</span>) <span class="hljs-comment">// assertion</span></span><span class="line"><span class="line-number"></span>})</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="add-delay-to-the-app">Add delay to the app</h2>
<pre><code class="hljs lang- moonscript"><span class="line"><span class="line-number"></span>// todomvc/app.js</span><span class="line"><span class="line-number"></span>addTodo ({ commit, state }) {</span><span class="line"><span class="line-number"></span>  // ...</span><span class="line"><span class="line-number"></span>  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {</span><span class="line"><span class="line-number"></span>    axios.post(<span class="hljs-string">'/todos'</span>, todo).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {</span><span class="line"><span class="line-number"></span>      commit(<span class="hljs-string">'ADD_TODO'</span>, todo)</span><span class="line"><span class="line-number"></span>    })</span><span class="line"><span class="line-number"></span>  }, <span class="hljs-number">0</span>)</span><span class="line"><span class="line-number"></span>},</span></code></pre>


<blockquote>
<p>Is the test passing now?</p>
</blockquote>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="todo-debug-the-failing-test">Todo: debug the failing test</h2>
<ul>
<li>inspect the failing command "FIND"</li>
<li>inspect previous command "GET"</li>
<li>what do you think is happening?</li>
</ul>
<aside class="notes"><p><code>FIND</code> command is never going to succeed, because it is already locked to search in the <em>first</em> <code>&lt;li&gt;</code> element only. So when the second correct <code>&lt;li&gt;</code> element appears, <code>FIND</code> still only searches in the first one - because Cypress does not go back to retry <code>cy.get</code>.</p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="todo-remove-or-shorten-the-artificial-delay-to-make-the-test-flaky">Todo: remove or shorten the artificial delay to make the test flaky</h2>
<blockquote>
<p>Use the binary search algorithm to find delay that turns the test into flaky test - sometimes the test passes, sometimes it fails.</p>
</blockquote>
<aside class="notes"><p>For me it was 46ms. Flaky test like this works fine locally, yet sometimes fails in production where network delays are longer.</p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><blockquote>
<p>‚ö†Ô∏è Only the last command is retried ‚ö†Ô∏è</p>
</blockquote>
<pre><code class="hljs lang- vim"><span class="line"><span class="line-number"></span>cy.<span class="hljs-built_in">get</span>(<span class="hljs-string">'.new-todo'</span>).<span class="hljs-built_in">type</span>(<span class="hljs-string">'todo B{enter}'</span>)</span><span class="line"><span class="line-number"></span>cy.<span class="hljs-built_in">get</span>(<span class="hljs-string">'.todo-list li'</span>) // queries immediately, finds <span class="hljs-number">1</span> <span class="hljs-symbol">&lt;li&gt;</span></span><span class="line"><span class="line-number"></span>  .<span class="hljs-keyword">find</span>(<span class="hljs-string">'label'</span>) // retried, retried, retried with <span class="hljs-number">1</span> <span class="hljs-symbol">&lt;li&gt;</span></span><span class="line"><span class="line-number"></span>  // never succeeds with <span class="hljs-keyword">only</span> <span class="hljs-number">1</span><span class="hljs-keyword">st</span> <span class="hljs-symbol">&lt;li&gt;</span></span><span class="line"><span class="line-number"></span>  .should(<span class="hljs-string">'contain'</span>, <span class="hljs-string">'todo B'</span>)</span></code></pre>


<p>How do we fix the flaky test?</p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="solution-1-merge-queries">Solution 1: merge queries</h2>
<pre><code class="hljs lang- stata"><span class="line"><span class="line-number"></span><span class="hljs-comment">// dangerous ‚ö†Ô∏è</span></span><span class="line"><span class="line-number"></span>cy.<span class="hljs-built_in">get</span>('.todo-<span class="hljs-keyword">list</span> <span class="hljs-keyword">li</span>')</span><span class="line"><span class="line-number"></span>  .find('<span class="hljs-keyword">label</span>')</span><span class="line"><span class="line-number"></span>  .should(...)</span><span class="line"><span class="line-number"></span>&nbsp;</span><span class="line"><span class="line-number"></span><span class="hljs-comment">// recommended ‚úÖ</span></span><span class="line"><span class="line-number"></span>cy.<span class="hljs-built_in">get</span>('.todo-<span class="hljs-keyword">list</span> <span class="hljs-keyword">li</span> <span class="hljs-keyword">label</span>')</span><span class="line"><span class="line-number"></span>  .should(...)</span></code></pre>


<p>‚å®Ô∏è try this in test "solution 1: merges queries"</p>
<aside class="notes"><p>The test should pass now, even with longer delay, because <code>cy.get</code> is retried.</p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="merge-queries-for-cy-its-">merge queries for <code>cy.its</code></h2>
<pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-comment">// dangerous ‚ö†Ô∏è</span></span><span class="line"><span class="line-number"></span><span class="hljs-comment">// only the last "its" will be retried</span></span><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.window</span>()</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.its</span>(<span class="hljs-string">'app'</span>)             <span class="hljs-comment">// runs once</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.its</span>(<span class="hljs-string">'model'</span>)           <span class="hljs-comment">// runs once</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.its</span>(<span class="hljs-string">'todos'</span>)           <span class="hljs-comment">// retried</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'have.length'</span>, <span class="hljs-number">2</span>)</span><span class="line"><span class="line-number"></span>&nbsp;</span><span class="line"><span class="line-number"></span><span class="hljs-comment">// ‚úÖ recommended</span></span><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.window</span>()</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.its</span>(<span class="hljs-string">'app.model.todos'</span>) <span class="hljs-comment">// retried</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'have.length'</span>, <span class="hljs-number">2</span>)</span></code></pre>


<p>From <a href="https://glebbahmutov.com/blog/set-flag-to-start-tests/" rel="noopener noreferrer" target="_blank">Set flag to start tests</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="solution-2-alternate-commands-and-assertions">Solution 2: alternate commands and assertions</h2>
<pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.new-todo'</span>)<span class="hljs-selector-class">.type</span>(<span class="hljs-string">'todo A{enter}'</span>)</span><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.todo-list li'</span>)         <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'have.length'</span>, <span class="hljs-number">1</span>)     <span class="hljs-comment">// assertion</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.find</span>(<span class="hljs-string">'label'</span>)                <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'contain'</span>, <span class="hljs-string">'todo A'</span>)  <span class="hljs-comment">// assertion</span></span><span class="line"><span class="line-number"></span>&nbsp;</span><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.new-todo'</span>)<span class="hljs-selector-class">.type</span>(<span class="hljs-string">'todo B{enter}'</span>)</span><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.todo-list li'</span>)         <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'have.length'</span>, <span class="hljs-number">2</span>)     <span class="hljs-comment">// assertion</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.find</span>(<span class="hljs-string">'label'</span>)                <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'contain'</span>, <span class="hljs-string">'todo B'</span>)  <span class="hljs-comment">// assertion</span></span></code></pre>


<p>‚å®Ô∏è try this in test "solution 2: alternate commands and assertions"</p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="cypress-retries-triple-header">Cypress Retries: Triple Header</h2>
<h3 id="1-dom-queries">1. DOM queries</h3>
<pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'li'</span>)</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'have.length'</span>, <span class="hljs-number">2</span>)</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="cypress-retries-triple-header">Cypress Retries: Triple Header</h2>
<h3 id="2-network">2. Network</h3>
<pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-comment">// spy / stub network calls</span></span><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.route</span>(...)<span class="hljs-selector-class">.as</span>(<span class="hljs-string">'new-item'</span>)</span><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.wait</span>(<span class="hljs-string">'@new-item'</span>)</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.its</span>(<span class="hljs-string">'response.body'</span>)</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'have.length'</span>, <span class="hljs-number">2</span>)</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="cypress-retries-triple-header">Cypress Retries: Triple Header</h2>
<h3 id="3-application">3. Application</h3>
<pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-comment">// access and spy / stub application code</span></span><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.spy</span>(...)<span class="hljs-selector-class">.as</span>(<span class="hljs-string">'some-method'</span>)</span><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'@some-method'</span>)</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>('have.been.calledOnce)</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="-take-away">üìù Take away</h2>
<p>Most commands have built-in sensible waits:</p>
<blockquote>
<p>Element should exist and be visible before clicking</p>
</blockquote>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="-take-away">üìù Take away</h2>
<p>Many commands also retry themselves until the assertions that follow pass</p>
<pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'li'</span>)</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'have.length'</span>, <span class="hljs-number">2</span>)</span></code></pre>


<p>DOM üéâ Network üéâ Application methods üéâ</p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="-take-away">üìù Take away</h2>
<blockquote>
<p>‚ö†Ô∏è Only the last command is retried ‚ö†Ô∏è</p>
</blockquote>
<ol>
<li>Merge queries into one command</li>
<li>Alternate commands and assertions</li>
</ol>
</section></section>
            
        </div>
        

<footer id="title-footer" class="footer-visible"><p id="notification" class="footer-fade"> </p></footer>


    <div class="backgrounds"><div class="slide-background past" data-background-hash="whitenullnullnullnullnullnullnullnullnull" data-loaded="true" style="background: white; display: block;"><div class="slide-background-content"></div></div><div class="slide-background stack present" data-loaded="true" style="display: block;"><div class="slide-background-content"></div><div class="slide-background present" data-loaded="true" style="display: block;"><div class="slide-background-content"></div></div><div class="slide-background future" data-loaded="true" style="display: block;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: block;" data-loaded="true"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div></div></div><div class="progress" style="display: block;"><span style="width: 38.1818px;"></span></div><aside class="controls" data-controls-layout="bottom-right" data-controls-back-arrows="faded" style="display: block;"><button class="navigate-left enabled" aria-label="previous slide"><div class="controls-arrow"></div></button><button class="navigate-right highlight" aria-label="next slide" disabled="disabled"><div class="controls-arrow"></div></button><button class="navigate-up" aria-label="above slide" disabled="disabled"><div class="controls-arrow"></div></button><button class="navigate-down enabled highlight" aria-label="below slide"><div class="controls-arrow"></div></button></aside><div class="slide-number" style="display: block;"><a href="https://gitpitch.com/cypress-io/testing-workshop-cypress?p=slides/11-retry-ability#/1"><span class="slide-number-a">2</span><span class="slide-number-delimiter">/</span><span class="slide-number-b">45</span></a></div><div class="speaker-notes" data-prevent-swipe="" tabindex="0"></div><div class="pause-overlay"><button class="resume-button">Resume presentation</button></div><div id="aria-status-div" aria-live="polite" aria-atomic="true" style="position: absolute; height: 1px; width: 1px; overflow: hidden; clip: rect(1px, 1px, 1px, 1px);">‚òÄÔ∏è Part 11: Retry-ability
üìö You will learn

deep dive into assertions
built-in command waits
retry-ability üîë

</div></div>
    
    
    <div class="gp-menu">
      <div class="slide-menu-button">
        
        <a class="reveal" onclick="goHome(); return false;" title="Go Home" rel="noopener noreferrer" target="_blank">
          <i class="gp-menu-bars fa fa-home" aria-hidden="true"> </i>
        </a>
        
        
        <a class="reveal" onclick="toggleMenu(); return false;" title="Slide Table-of-Contents, Key=M" rel="noopener noreferrer" target="_blank">
          <i class="gp-menu-bars fa fa-bars" aria-hidden="true"> </i>
        </a>
        
      </div>
    <nav class="slide-menu slide-menu--left"><ol class="slide-menu-toolbar"><li data-button="0" class="toolbar-panel-button" data-panel="Slides"><i class="fa fa-list"></i></li><li id="close"><i class="fa fa-times"></i></li></ol><div data-panel="Slides" class="slide-menu-panel active-menu-panel"><div class="toc-title"><hr class="fade-away"></div><ul class="slide-menu-items"><li class="slide-menu-item no-title past" data-item="0" data-slide-h="0" data-slide-v="0"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 0</span></li><li class="slide-menu-item active" data-item="1" data-slide-h="1" data-slide-v="0"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">‚òÄÔ∏è Part 11: Retry-ability</span></li><li class="slide-menu-item-vertical no-title future" data-item="2" data-slide-h="1" data-slide-v="1"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 2</span></li><li class="slide-menu-item-vertical future" data-item="3" data-slide-h="1" data-slide-v="2"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: finish the test "shows UL"</span></li><li class="slide-menu-item-vertical no-title future" data-item="4" data-slide-h="1" data-slide-v="3"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 4</span></li><li class="slide-menu-item-vertical no-title future" data-item="5" data-slide-h="1" data-slide-v="4"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 5</span></li><li class="slide-menu-item-vertical future" data-item="6" data-slide-h="1" data-slide-v="5"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">There is IntelliSense</span></li><li class="slide-menu-item-vertical no-title future" data-item="7" data-slide-h="1" data-slide-v="6"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 7</span></li><li class="slide-menu-item-vertical no-title future" data-item="8" data-slide-h="1" data-slide-v="7"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 8</span></li><li class="slide-menu-item-vertical future" data-item="9" data-slide-h="1" data-slide-v="8"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: BDD vs TDD</span></li><li class="slide-menu-item-vertical future" data-item="10" data-slide-h="1" data-slide-v="9"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title"> do you see the difference?</span></li><li class="slide-menu-item-vertical future" data-item="11" data-slide-h="1" data-slide-v="10"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">BDD</span></li><li class="slide-menu-item-vertical future" data-item="12" data-slide-h="1" data-slide-v="11"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">TDD</span></li><li class="slide-menu-item-vertical future" data-item="13" data-slide-h="1" data-slide-v="12"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">What if you need more complex assertions?</span></li><li class="slide-menu-item-vertical future" data-item="14" data-slide-h="1" data-slide-v="13"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: write complex assertion</span></li><li class="slide-menu-item-vertical future" data-item="15" data-slide-h="1" data-slide-v="14"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">should(cb) common use cases</span></li><li class="slide-menu-item-vertical future" data-item="16" data-slide-h="1" data-slide-v="15"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">üîë Retry-ability</span></li><li class="slide-menu-item-vertical future" data-item="17" data-slide-h="1" data-slide-v="16"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Commands and assertions</span></li><li class="slide-menu-item-vertical future" data-item="18" data-slide-h="1" data-slide-v="17"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Look at the last command + assertion</span></li><li class="slide-menu-item-vertical no-title future" data-item="19" data-slide-h="1" data-slide-v="18"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 19</span></li><li class="slide-menu-item-vertical no-title future" data-item="20" data-slide-h="1" data-slide-v="19"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 20</span></li><li class="slide-menu-item-vertical future" data-item="21" data-slide-h="1" data-slide-v="20"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Retry-ability</span></li><li class="slide-menu-item-vertical future" data-item="22" data-slide-h="1" data-slide-v="21"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">then(cb) vs should(cb)</span></li><li class="slide-menu-item-vertical future" data-item="23" data-slide-h="1" data-slide-v="22"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">return value from should(cb)</span></li><li class="slide-menu-item-vertical future" data-item="24" data-slide-h="1" data-slide-v="23"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Automatic Waiting</span></li><li class="slide-menu-item-vertical future" data-item="25" data-slide-h="1" data-slide-v="24"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Timeouts</span></li><li class="slide-menu-item-vertical future" data-item="26" data-slide-h="1" data-slide-v="25"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Timeouts</span></li><li class="slide-menu-item-vertical no-title future" data-item="27" data-slide-h="1" data-slide-v="26"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 27</span></li><li class="slide-menu-item-vertical future" data-item="28" data-slide-h="1" data-slide-v="27"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: write test that checks the label</span></li><li class="slide-menu-item-vertical no-title future" data-item="29" data-slide-h="1" data-slide-v="28"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 29</span></li><li class="slide-menu-item-vertical future" data-item="30" data-slide-h="1" data-slide-v="29"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: write test that checks two labels</span></li><li class="slide-menu-item-vertical no-title future" data-item="31" data-slide-h="1" data-slide-v="30"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 31</span></li><li class="slide-menu-item-vertical future" data-item="32" data-slide-h="1" data-slide-v="31"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Add delay to the app</span></li><li class="slide-menu-item-vertical future" data-item="33" data-slide-h="1" data-slide-v="32"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: debug the failing test</span></li><li class="slide-menu-item-vertical future" data-item="34" data-slide-h="1" data-slide-v="33"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: remove or shorten the artificial delay to make the test flaky</span></li><li class="slide-menu-item-vertical no-title future" data-item="35" data-slide-h="1" data-slide-v="34"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 35</span></li><li class="slide-menu-item-vertical future" data-item="36" data-slide-h="1" data-slide-v="35"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Solution 1: merge queries</span></li><li class="slide-menu-item-vertical future" data-item="37" data-slide-h="1" data-slide-v="36"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">merge queries for cy.its</span></li><li class="slide-menu-item-vertical future" data-item="38" data-slide-h="1" data-slide-v="37"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Solution 2: alternate commands and assertions</span></li><li class="slide-menu-item-vertical future" data-item="39" data-slide-h="1" data-slide-v="38"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Cypress Retries: Triple Header</span></li><li class="slide-menu-item-vertical future" data-item="40" data-slide-h="1" data-slide-v="39"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Cypress Retries: Triple Header</span></li><li class="slide-menu-item-vertical future" data-item="41" data-slide-h="1" data-slide-v="40"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Cypress Retries: Triple Header</span></li><li class="slide-menu-item-vertical future" data-item="42" data-slide-h="1" data-slide-v="41"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">üìù Take away</span></li><li class="slide-menu-item-vertical future" data-item="43" data-slide-h="1" data-slide-v="42"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">üìù Take away</span></li><li class="slide-menu-item-vertical future" data-item="44" data-slide-h="1" data-slide-v="43"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">üìù Take away</span></li></ul></div></nav><div class="slide-menu-overlay"></div></div>
    
    
    <script src="./Retry-ability_files/reveal.js"></script>
    <script src="./Retry-ability_files/jquery.min.js"></script>
    
    
    

    <script>
        Reveal.initialize({
            
            controls: true,
            
            controlsLayout: 'bottom-right',
            progress: true,
            embedded: true,
            margin: 0.0,
            
            
            showNotes: false,
            transition: 'none',
            backgroundTransition: 'none',
            autoSlide: 0,
            loop: false,
            center: true,
            rtl: false,
            shuffle: false,
            mouseWheel: false,
            
            controlsTutorial: true,
            
            
            
              slideNumber: 'c/t', // slideNumber: false,
            
            history: true,
            
            
            menu: {
              custom: [],
              path : "/assets/libs/slides/plugin/menu",
              themes : false,
              transitions:  false,
              markers: true,
              sticky: true,
              autoOpen: true
            },
            
            
            dependencies: [
                { src: "/assets/libs/slides/plugin/markdown/marked.js",
                  condition: function() {
                    return !!document.querySelector( '[data-markdown]' );
                  }},
                { src: "/assets/libs/slides/plugin/markdown/markdown.js",
                condition: function() {
                  return !!document.querySelector( '[data-markdown]' );
                }},
                
                { src:"/assets/libs/slides/plugin/menu/menu.js",
                  async: true},
                
                
                
                
                { src: '/assets/libs/highlight.js/9.15.8/highlight.js', async: true },
                
                { src: '/assets/libs/highlight.js/9.15.8/reveal-code-focus-30.js',
                  async: true,
                  callback: function() {
                    RevealCodeFocus();
                  }
                },
                
                
                
                
                
            ]
        });

        Reveal.addEventListener('ready', function(evt) {

          if(typeof twtter !== "undefined") {
              twttr.widgets.load();
          }

          upgradeAnchors();
          pushFootnoteNotification();

          // Force refresh to workaround Reveal.js 3.8.0
          // first render problem re. scrollHeight calc
          // for slides with non-text (image) content.
          setTimeout(Reveal.layout, 500);
        });

        
        Reveal.addEventListener('menu-ready', function(evt) {
            toggleMenuOff();
        });
        

        Reveal.addEventListener('slidechanged', function(evt) {
          /*
          if (evt.indexh === 0 && evt.indexv === 0) {
            pushHelpNotification();
          } else {
            pushFootnoteNotification();
          }
          */
          pushFootnoteNotification();
        });

        Reveal.configure({
            keyboard: {
                88: function() { // bind "x" key to "select" code block content

                    var currentSlide = Reveal.getCurrentSlide();
                    var preBlock = $(currentSlide).find("pre");

                    if(preBlock.length > 0) {

                        if (window.getSelection) {
                            var range = document.createRange();
                            range.selectNodeContents(preBlock[0]);
                            var selection = window.getSelection();
                            selection.removeAllRanges();
                            selection.addRange(range);
                        }
                    }
                }
            }
        });

        function goHome() {
            window.location.href = "https://gitpitch.com";
        }

        function enterFullscreen() {
            Reveal.triggerKey(70);
        };

        function enterOverview() {
            Reveal.toggleOverview();
        };

        function enterBlackout() {
            Reveal.togglePause();
        };

        function toggleHelp() {
          Reveal.toggleHelp();
        }

        function enableEvents() {
            Reveal.addEventListeners();
        };

        function disableEvents() {
            Reveal.removeEventListeners();
        };

        function toggleMenuOff() {
            if(RevealMenu && RevealMenu.isOpen()) {
                RevealMenu.toggle();
            }
        }

        function toggleMenu() {
            if(RevealMenu) {
                RevealMenu.toggle();
            }
        }

        function upgradeAnchors() {
            Array.from(document.getElementsByTagName('a')).forEach($link => {
              if ($link.hostname !== window.location.hostname) {
                $link.setAttribute('rel', 'noopener noreferrer');
                $link.setAttribute('target', '_blank');
              }
            });
        }

    </script>

    

    

<script>
    function pushNotification(msg, fade) {
      var footer = document.getElementById('title-footer')
      var notification = document.getElementById('notification')
      if(window.innerWidth < 700) {
        footer.className = "footer-hidden";
      } else {
          footer.className = "footer-visible";
          if(fade) {
            notification.className = "footer-fade";
            notification.innerHTML = msg;
          } else {
            notification.className = "footer-hard";
            notification.innerHTML = msg;
          }
      }
    };

    function pushHelpNotification() {
      if(window.innerWidth < 700)
        pushNotification("<a href='#' onclick='RevealMenu.toggle()'>Menu</a> | <a href='#' onclick='enterFullscreen()'>Fullscreen</a> | <a href='#' onclick='enterOverview()'>Overview</a> | <a href='#' onclick='enterBlackout()'>Blackout</a> | <a href='#' onclick='RevealNotes.open()'>Speaker</a> | <a href='#' onclick='enterHelp()'>Help</a>");
      else
        pushNotification("Navigate : Space / Arrow Keys | <a href='#' onclick='RevealMenu.toggle()'>M</a> - Menu | <a href='#' onclick='enterFullscreen()'>F</a> - Fullscreen | <a href='#' onclick='enterOverview()'>O</a> - Overview | <a href='#' onclick='enterBlackout()'>B</a> - Blackout | <a href='#' onclick='RevealNotes.open()'>S</a> - Speaker | <a href='#' onclick='enterHelp()'>?</a> - Help");
    }

    function pushFootnoteNotification() {
      
        pushNotification(" ", true);
      
    }

    function pushCodePresentingStepNotification(step, frags) {
      // pushNotification("Code Presenting - Step " + step + " / " + frags, true);
    }
</script>





</body></html>