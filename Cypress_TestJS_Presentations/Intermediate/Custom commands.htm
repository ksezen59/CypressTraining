<!DOCTYPE html>
<!-- saved from url=(0087)https://gitpitch.com/cypress-io/testing-workshop-cypress?p=slides/12-custom-commands#/1 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport">
    <title>GitPitch Markdown</title>
    <meta name="description" content="Slide Decks for Tech Conferences, Training, Developer Advocates, and Educators">
    <meta name="keywords" content="Markdown, Presentation, Slides, Developer">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    
    <meta name="‚Äùrobots‚Äù" content="‚Äùnoindex,nofollow‚Äù">
    
    

<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@gitpitch">
<meta name="twitter:title" content="GitPitch Markdown">
<meta name="twitter:description" content="The perfect slide deck solution for Tech Conferences, Training, Developer Advocates, and Educators.">
<meta name="twitter:image" content="https://gitpitch.com/assets/img/gitpitch-40-splash.png">


    

<meta property="og:site_name" content="GitPitch">
<meta property="og:type" content="article">
<meta property="og:title" content="GitPitch Markdown">
<meta property="og:description" content="The perfect slide deck solution for Tech Conferences, Training, Developer Advocates, and Educators.">
<meta property="og:image" content="https://gitpitch.com/assets/img/gitpitch-40-splash.png">
<meta property="og:url" content="https://gitpitch.com/cypress-io/testing-workshop-cypress/master?grs=github&amp;t=template&amp;p=slides%2F12-custom-commands">


    

<link rel="alternate" type="application/json+oembed" href="https://gitpitch.com/pitchme/oembed?url=https%3A%2F%2Fgitpitch.com%2Fcypress-io%2Ftesting-workshop-cypress%2Fmaster%3Fgrs%3Dgithub%26t%3Dtemplate%26p%3Dslides%252F12-custom-commands&amp;format=json" title="GitPitch - Markdown Presentations for Everyone on Git">
<link rel="alternate" type="text/xml+oembed" href="https://gitpitch.com/pitchme/oembed?url=https%3A%2F%2Fgitpitch.com%2Fcypress-io%2Ftesting-workshop-cypress%2Fmaster%3Fgrs%3Dgithub%26t%3Dtemplate%26p%3Dslides%252F12-custom-commands&amp;format=xml" title="GitPitch - Markdown Presentations for Everyone on Git">


    
    
    <link rel="apple-touch-icon" sizes="120x120" href="https://gitpitch.com/assets/img/favicon/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="https://gitpitch.com/assets/img/favicon/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="https://gitpitch.com/assets/img/favicon/favicon-16x16.png">
    
    
    
<link href="./Custom commands_files/reveal.css" rel="stylesheet" type="text/css">

<link href="./Custom commands_files/moon.css" rel="stylesheet" type="text/css" id="theme">
<link href="./Custom commands_files/future.css" rel="stylesheet" type="text/css">


<link href="./Custom commands_files/title-footer-mod.css" rel="stylesheet" type="text/css" id="theme">

<link href="./Custom commands_files/paper.css" rel="stylesheet" type="text/css">


<link href="./Custom commands_files/atom-one-light.css" rel="stylesheet" type="text/css">
<link href="./Custom commands_files/octicons.css" rel="stylesheet" type="text/css">
<link href="./Custom commands_files/fa-all.min.css" rel="stylesheet" type="text/css">
<link href="./Custom commands_files/fa-v4-shims.min.css" rel="stylesheet" type="text/css">

<link href="./Custom commands_files/pitchcore.css" rel="stylesheet" type="text/css">




<link href="./Custom commands_files/pitch.css" rel="stylesheet" type="text/css">

<link href="./Custom commands_files/pitchmenu.css" rel="stylesheet" type="text/css">


<link href="./Custom commands_files/menu.css" rel="stylesheet" type="text/css">



<link href="./Custom commands_files/pitchbardark.css" rel="stylesheet" type="text/css">


<link href="./Custom commands_files/pitchcode.css" rel="stylesheet" type="text/css">



<link href="./Custom commands_files/css" rel="stylesheet">



    
    

<style>
.half-image img {
  width: 40%;
}

</style>


    <link href="./Custom commands_files/pitchpost.css" rel="stylesheet" type="text/css">
    

    
        
            

<script async="" src="./Custom commands_files/analytics.js"></script><script async="" src="./Custom commands_files/analytics.js"></script><script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  
  ga('create', 'UA-80973712-1', 'auto');
  ga('send', 'pageview');
  
</script>


        
        
            

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  
  ga('create', 'UA-59606812-9', 'auto', 'gpu');
  ga('gpu.send', 'pageview');
  
</script><script type="text/javascript" src="./Custom commands_files/marked.js"></script><script type="text/javascript" src="./Custom commands_files/markdown.js"></script><script type="text/javascript" src="./Custom commands_files/menu.js"></script><script type="text/javascript" src="./Custom commands_files/highlight.js"></script><script type="text/javascript" src="./Custom commands_files/reveal-code-focus-30.js"></script>


        
    


</head>
<body>
    


    <div class="reveal none center has-vertical-slides has-horizontal-slides ready" role="application" data-transition-speed="default" data-background-transition="none" style="">
        <div class="slides" style="width: 960px; height: 700px; zoom: 1.13143;">
            
            <section data-charset="utf-8" style="top: 241px; display: block;" data-markdown="" data-markdown-parsed="true" data-background="white" class="has-light-background past" hidden="" aria-hidden="true"><!-- -->
<div style="padding-top: 0px; font-size: 36px;" class="font-ubuntu-heavy text-pink text-bold">
<p style="color: #5289F7; font-weight: bold;">GitPitch.com is shutting down.<br>This slide deck will no longer<br>be available from March 1, 2021. </p></div>
</section><section data-charset="utf-8" style="top: 0px; display: block;" class="stack present"><section data-markdown="" data-markdown-parsed="true" style="top: 119px; display: block;" class="present"><h2 id="-part-12-custom-commands">‚òÄÔ∏è Part 12: Custom commands</h2>
<h3 id="-you-will-learn">üìö You will learn</h3>
<ul>
<li>adding new commands to <code>cy</code></li>
<li>supporting retry-ability</li>
<li>TypeScript definition for new command</li>
<li>useful 3rd party commands</li>
</ul>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 250.5px; display: block;" hidden=""><ul>
<li>keep <code>todomvc</code> app running</li>
<li>open <code>cypress/integration/12-custom-commands/spec.js</code></li>
</ul>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 165.5px; display: block;" hidden=""><h3 id="-code-reuse-and-clarity">üíØ Code reuse and clarity</h3>
<pre><code class="hljs lang- lisp"><span class="line"><span class="line-number"></span>beforeEach(<span class="hljs-name">function</span> resetData () {</span><span class="line"><span class="line-number"></span>  cy.request('POST', '/reset', {</span><span class="line"><span class="line-number"></span>    todos: []</span><span class="line"><span class="line-number"></span>  })</span><span class="line"><span class="line-number"></span>})</span><span class="line"><span class="line-number"></span>beforeEach(<span class="hljs-name">function</span> visitSite () {</span><span class="line"><span class="line-number"></span>  cy.visit('/')</span><span class="line"><span class="line-number"></span>})</span></code></pre>


<aside class="notes"><p>Before each test we need to reset the server data and visit the page. The data clean up and opening the site could be a lot more complex that our simple example. We probably want to factor out <code>resetData</code> and <code>visitSite</code> into reusable functions every spec and test can use.</p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h3 id="todo-move-them-into-cypress-support-index-js-">Todo: move them into <code>cypress/support/index.js</code></h3>
<p>Now these <code>beforeEach</code> hooks will be loaded <em>before every</em> test in every spec.</p>
<aside class="notes"><p>Is this a good solution?</p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h3 id="todo-move-them-into-cypress-support-hooks-js-">Todo: move them into <code>cypress/support/hooks.js</code></h3>
<p>And load from the spec file:</p>
<pre><code class="hljs lang- javascript"><span class="line"><span class="line-number"></span><span class="hljs-comment">// automatically runs "beforeEach" hooks</span></span><span class="line"><span class="line-number"></span><span class="hljs-keyword">import</span> <span class="hljs-string">'../../support/hooks'</span></span><span class="line"><span class="line-number"></span>&nbsp;</span><span class="line"><span class="line-number"></span>it(<span class="hljs-string">'enters 10 todos'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><span class="line"><span class="line-number"></span>  ...</span><span class="line"><span class="line-number"></span>})</span></code></pre>


<aside class="notes"><p>A better solution, because only the spec file that needs these hooks can load them.</p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h3 id="todo-export-the-resetdata-and-visitsite-">Todo: export the <code>resetData</code> and <code>visitSite</code></h3>
<pre><code class="hljs lang- javascript"><span class="line"><span class="line-number"></span><span class="hljs-comment">// cypress/support/hooks.js</span></span><span class="line"><span class="line-number"></span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resetData</span> (<span class="hljs-params"></span>) </span>{ ... }</span><span class="line"><span class="line-number"></span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">visitSite</span> (<span class="hljs-params"></span>) </span>{ ... }</span></code></pre>


<p>‚å®Ô∏è and update <code>spec.js</code></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="my-opinion">My opinion</h2>
<blockquote>
<p>Little reusable functions are the best</p>
</blockquote>
<pre><code class="hljs lang- moonscript"><span class="line"><span class="line-number"></span><span class="hljs-keyword">import</span> {</span><span class="line"><span class="line-number"></span>  enterTodo, getTodoApp, getTodoItems, resetDatabase, visit</span><span class="line"><span class="line-number"></span>} <span class="hljs-keyword">from</span> <span class="hljs-string">'../../support/utils'</span></span><span class="line"><span class="line-number"></span>it(<span class="hljs-string">'loads the app'</span>, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {</span><span class="line"><span class="line-number"></span>  resetDatabase()</span><span class="line"><span class="line-number"></span>  visit()</span><span class="line"><span class="line-number"></span>  getTodoApp().should(<span class="hljs-string">'be.visible'</span>)</span><span class="line"><span class="line-number"></span>  enterTodo(<span class="hljs-string">'first item'</span>)</span><span class="line"><span class="line-number"></span>  enterTodo(<span class="hljs-string">'second item'</span>)</span><span class="line"><span class="line-number"></span>  getTodoItems().should(<span class="hljs-string">'have.length'</span>, <span class="hljs-number">2</span>)</span><span class="line"><span class="line-number"></span>})</span></code></pre>


<aside class="notes"><p>Some functions can return <code>cy</code> instance, some don't, whatever is convenient. I also find small functions that return complex selectors very useful to keep selectors from duplication.</p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>Pro: functions are easy to document with JSDoc</p>
<p><img src="./Custom commands_files/jsdoc.png" title="" alt="JSDoc example" class="JSDoc example" style="width: auto;height: auto;" data-image-key="-7068514656525900958"></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>And then IntelliSense works immediately</p>
<p><img src="./Custom commands_files/intellisense.jpeg" title="" alt="IntelliSense" class="IntelliSense" style="width: auto;height: auto;" data-image-key="5369125638148723866"></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>And MS IntelliSense can understand types from JSDoc and check those!</p>
<p><a href="https://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript" rel="noopener noreferrer" target="_blank">https://github.com/Microsoft/TypeScript/wiki/JSDoc-support-in-JavaScript</a></p>
<p>More details in: <a href="https://slides.com/bahmutov/ts-without-ts" rel="noopener noreferrer" target="_blank">https://slides.com/bahmutov/ts-without-ts</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="use-cases-for-custom-commands">Use cases for custom commands</h2>
<ul>
<li>share code in entire project without individual imports</li>
<li>complex logic with custom logging into Command Log<ul>
<li>login sequence</li>
<li>many application actions</li>
</ul>
</li>
</ul>
<p>üìù <a href="https://on.cypress.io/custom-commands" rel="noopener noreferrer" target="_blank">on.cypress.io/custom-commands</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>Let's write a custom command to create a todo</p>
<pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-comment">// instead of this</span></span><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">'.new-todo'</span>)</span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.type</span>(<span class="hljs-string">'todo 0{enter}'</span>)</span><span class="line"><span class="line-number"></span><span class="hljs-comment">// use this</span></span><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.createTodo</span>(<span class="hljs-string">'todo 0'</span>)</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="todo-write-and-use-createtodo-">Todo: write and use "createTodo"</h2>
<pre><code class="hljs lang- stylus"><span class="line"><span class="line-number"></span>Cypress<span class="hljs-selector-class">.Commands</span><span class="hljs-selector-class">.add</span>(<span class="hljs-string">'createTodo'</span>, todo =&gt; {</span><span class="line"><span class="line-number"></span>  cy.get(<span class="hljs-string">'.new-todo'</span>).type(`${todo}{enter}`)</span><span class="line"><span class="line-number"></span>})</span><span class="line"><span class="line-number"></span><span class="hljs-function"><span class="hljs-title">it</span><span class="hljs-params">(<span class="hljs-string">'creates a todo'</span>, ()</span></span> =&gt; {</span><span class="line"><span class="line-number"></span>  cy.createTodo(<span class="hljs-string">'my first todo'</span>)</span><span class="line"><span class="line-number"></span>})</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="-make-it-better">‚¨ÜÔ∏è Make it better</h2>
<ul>
<li>have IntelliSense working for <code>createTodo</code></li>
<li>have nicer Command Log</li>
</ul>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="todo-add-createtodo-to-cy-object">Todo: add <code>createTodo</code> to <code>cy</code> object</h2>
<p>How: <a href="https://github.com/cypress-io/cypress-example-todomvc#cypress-intellisense" rel="noopener noreferrer" target="_blank">https://github.com/cypress-io/cypress-example-todomvc#cypress-intellisense</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>‚å®Ô∏è in file <code>cypress/integration/12-custom-commands/custom-commands.d.ts</code></p>
<pre><code class="hljs lang- angelscript"><span class="line"><span class="line-number"></span><span class="hljs-comment">/// &lt;reference types="cypress" /&gt;</span></span><span class="line"><span class="line-number"></span>declare <span class="hljs-keyword">namespace</span> <span class="hljs-symbol">Cypress</span> {</span><span class="line"><span class="line-number"></span>  <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Chainable</span>&lt;<span class="hljs-symbol">Subject</span>&gt; {</span><span class="line"><span class="line-number"></span>    <span class="hljs-comment">/**</span></span><span class="line"><span class="line-number"></span><span class="hljs-comment">     * Creates one Todo using UI</span></span><span class="line"><span class="line-number"></span><span class="hljs-comment">     * @example</span></span><span class="line"><span class="line-number"></span><span class="hljs-comment">     * cy.createTodo('new item')</span></span><span class="line"><span class="line-number"></span><span class="hljs-comment">     */</span></span><span class="line"><span class="line-number"></span>    createTodo(todo: <span class="hljs-built_in">string</span>): Chainable&lt;any&gt;</span><span class="line"><span class="line-number"></span>  }</span><span class="line"><span class="line-number"></span>}</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>Load the new definition file in <code>cypress/integration/12-custom-commands/spec.js</code></p>
<pre><code class="hljs lang- xml"><span class="line"><span class="line-number"></span>/// <span class="hljs-tag">&lt;<span class="hljs-name">reference</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"./custom-commands.d.ts"</span> /&gt;</span></span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p><img src="./Custom commands_files/create-todo-intellisense.jpeg" title="" alt="Custom command IntelliSense" class="Custom command IntelliSense" style="width: auto;height: auto;" data-image-key="-4146100670883633704"></p>
<p>More JSDoc examples: <a href="https://slides.com/bahmutov/ts-without-ts" rel="noopener noreferrer" target="_blank">https://slides.com/bahmutov/ts-without-ts</a></p>
<aside class="notes"><p>Editors other than VSCode might require work.</p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>‚ö†Ô∏è tell Cypress to ignore ".d.ts" files using <code>ignoreTestFiles</code> in cypress.json or save ".d.ts" files outside the integration folder.</p>
<aside class="notes"><p>Otherwise Cypress will try load ".d.ts" file as spec and without TypeScript loader will fail.</p>
</aside></section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="better-command-log">Better Command Log</h2>
<pre><code class="hljs lang- vim"><span class="line"><span class="line-number"></span>Cypress.Commands.<span class="hljs-built_in">add</span>(<span class="hljs-string">'createTodo'</span>, todo =&gt; {</span><span class="line"><span class="line-number"></span>  cy.<span class="hljs-built_in">get</span>(<span class="hljs-string">'.new-todo'</span>, { <span class="hljs-keyword">lo</span><span class="hljs-variable">g:</span> false })</span><span class="line"><span class="line-number"></span>    .<span class="hljs-built_in">type</span>(`${todo}{enter}`, { <span class="hljs-keyword">lo</span><span class="hljs-variable">g:</span> false })</span><span class="line"><span class="line-number"></span>  cy.<span class="hljs-built_in">log</span>(<span class="hljs-string">'createTodo'</span>, todo)</span><span class="line"><span class="line-number"></span>})</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="even-better-command-log">Even better Command Log</h2>
<pre><code class="hljs lang- pgsql"><span class="line"><span class="line-number"></span>Cypress.Commands.<span class="hljs-keyword">add</span>(<span class="hljs-string">'createTodo'</span>, todo =&gt; {</span><span class="line"><span class="line-number"></span>  const cmd = Cypress.log({</span><span class="line"><span class="line-number"></span>    <span class="hljs-type">name</span>: <span class="hljs-string">'create todo'</span>,</span><span class="line"><span class="line-number"></span>    message: todo,</span><span class="line"><span class="line-number"></span>    consoleProps () {</span><span class="line"><span class="line-number"></span>      <span class="hljs-keyword">return</span> {</span><span class="line"><span class="line-number"></span>        <span class="hljs-string">'Create Todo'</span>: todo</span><span class="line"><span class="line-number"></span>      }</span><span class="line"><span class="line-number"></span>    }</span><span class="line"><span class="line-number"></span>  })</span><span class="line"><span class="line-number"></span>  cy.<span class="hljs-keyword">get</span>(<span class="hljs-string">'.new-todo'</span>, { <span class="hljs-keyword">log</span>: <span class="hljs-keyword">false</span> })</span><span class="line"><span class="line-number"></span>    .<span class="hljs-keyword">type</span>(`${todo}{enter}`, { <span class="hljs-keyword">log</span>: <span class="hljs-keyword">false</span> })</span><span class="line"><span class="line-number"></span>})</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p><img src="./Custom commands_files/create-todo-log.png" title="" alt="createTodo log" class="createTodo log" style="width: auto;height: auto;" data-image-key="-5720711265134279215"></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h3 id="mark-command-completed">Mark command completed</h3>
<pre><code class="hljs lang- bash"><span class="line"><span class="line-number"></span>cy.get(<span class="hljs-string">'.new-todo'</span>, { <span class="hljs-built_in">log</span>: <span class="hljs-literal">false</span> })</span><span class="line"><span class="line-number"></span>  .<span class="hljs-built_in">type</span>(`<span class="hljs-variable">${todo}</span>{enter}`, { <span class="hljs-built_in">log</span>: <span class="hljs-literal">false</span> })</span><span class="line"><span class="line-number"></span>  .<span class="hljs-keyword">then</span>(<span class="hljs-variable">$el</span> =&gt; {</span><span class="line"><span class="line-number"></span>    cmd</span><span class="line"><span class="line-number"></span>      .<span class="hljs-built_in">set</span>({ <span class="hljs-variable">$el</span> })</span><span class="line"><span class="line-number"></span>      .snapshot()</span><span class="line"><span class="line-number"></span>      .end()</span><span class="line"><span class="line-number"></span>  })</span></code></pre>


<p><strong>Pro-tip:</strong> you can have multiple command snapshots.</p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h3 id="show-result-in-the-console">Show result in the console</h3>
<pre><code class="hljs lang- nimrod"><span class="line"><span class="line-number"></span>// <span class="hljs-literal">result</span> will get value <span class="hljs-keyword">when</span> command ends</span><span class="line"><span class="line-number"></span><span class="hljs-keyword">let</span> <span class="hljs-literal">result</span></span><span class="line"><span class="line-number"></span><span class="hljs-keyword">const</span> cmd = <span class="hljs-type">Cypress</span>.log({</span><span class="line"><span class="line-number"></span>  consoleProps () {</span><span class="line"><span class="line-number"></span>    <span class="hljs-keyword">return</span> { <span class="hljs-literal">result</span> }</span><span class="line"><span class="line-number"></span>  }</span><span class="line"><span class="line-number"></span>})</span><span class="line"><span class="line-number"></span>// custom logic then:</span><span class="line"><span class="line-number"></span>.then(value =&gt; {</span><span class="line"><span class="line-number"></span>  <span class="hljs-literal">result</span> = value</span><span class="line"><span class="line-number"></span>  cmd.<span class="hljs-keyword">end</span>()</span><span class="line"><span class="line-number"></span>})</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="3rd-party-custom-commands">3rd party custom commands</h2>
<ul>
<li><a href="https://github.com/cypress-io/cypress-xpath" rel="noopener noreferrer" target="_blank">cypress-xpath</a></li>
<li><a href="https://github.com/meinaart/cypress-plugin-snapshots" rel="noopener noreferrer" target="_blank">cypress-plugin-snapshots</a></li>
<li><a href="https://github.com/NicholasBoll/cypress-pipe" rel="noopener noreferrer" target="_blank">cypress-pipe</a></li>
</ul>
<p><a href="https://on.cypress.io/plugins#custom-commands" rel="noopener noreferrer" target="_blank">on.cypress.io/plugins#custom-commands</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="try-cypress-xpath-">Try <code>cypress-xpath</code></h2>
<pre><code class="hljs lang- shell"><span class="line"><span class="line-number"></span><span class="hljs-meta">#</span><span class="bash"> already <span class="hljs-keyword">done</span> <span class="hljs-keyword">in</span> this repo</span></span><span class="line"><span class="line-number"></span>npm install -D cypress-xpath</span></code></pre>


<p>in <code>cypress/support/index.js</code></p>
<pre><code class="hljs lang- stylus"><span class="line"><span class="line-number"></span><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">'cypress-xpath'</span>)</span></span></span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p>With <code>cypress-xpath</code></p>
<pre><code class="hljs lang- lisp"><span class="line"><span class="line-number"></span>it('finds list items', () =&gt; {</span><span class="line"><span class="line-number"></span>  cy.xpath('//ul[@class=<span class="hljs-string">"todo-list"</span>]//li')</span><span class="line"><span class="line-number"></span>    .should('have.length', <span class="hljs-number">3</span>)</span><span class="line"><span class="line-number"></span>})</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="custom-command-with-retries">Custom command with retries</h2>
<p>How does <code>xpath</code> command retry the assertions that follow it?</p>
<pre><code class="hljs lang- less"><span class="line"><span class="line-number"></span><span class="hljs-selector-tag">cy</span><span class="hljs-selector-class">.xpath</span>(<span class="hljs-string">'...'</span>) <span class="hljs-comment">// command</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-selector-class">.should</span>(<span class="hljs-string">'have.length'</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// assertions</span></span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><pre><code class="hljs lang- javascript"><span class="line"><span class="line-number"></span><span class="hljs-comment">// use cy.verifyUpcomingAssertions</span></span><span class="line"><span class="line-number"></span><span class="hljs-keyword">const</span> resolveValue = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {</span><span class="line"><span class="line-number"></span>  <span class="hljs-keyword">return</span> Cypress.Promise.try(getValue).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {</span><span class="line"><span class="line-number"></span>    <span class="hljs-keyword">return</span> cy.verifyUpcomingAssertions(value, options, {</span><span class="line"><span class="line-number"></span>      <span class="hljs-attr">onRetry</span>: resolveValue,</span><span class="line"><span class="line-number"></span>    })</span><span class="line"><span class="line-number"></span>  })</span><span class="line"><span class="line-number"></span>}</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="try-cypress-pipe-">Try <code>cypress-pipe</code></h2>
<p>Easily retry your own functions</p>
<pre><code class="hljs lang- perl"><span class="line"><span class="line-number"></span>npm home cypress-<span class="hljs-keyword">pipe</span></span></code></pre>


<p>Advanced example: <a href="https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/" rel="noopener noreferrer" target="_blank">https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h3 id="todo-retry-getting-object-s-property">Todo: retry getting object's property</h3>
<pre><code class="hljs lang- stylus"><span class="line"><span class="line-number"></span>const o = {}</span><span class="line"><span class="line-number"></span><span class="hljs-function"><span class="hljs-title">setTimeout</span><span class="hljs-params">(()</span></span> =&gt; {</span><span class="line"><span class="line-number"></span>  o<span class="hljs-selector-class">.foo</span> = <span class="hljs-string">'bar'</span></span><span class="line"><span class="line-number"></span>}, <span class="hljs-number">1000</span>)</span></code></pre>


<ul>
<li>until it becomes defined</li>
<li>and is equal to</li>
</ul>
<p>‚å®Ô∏è test "passes when object gets new property"</p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h3 id="try-cypress-plugin-snapshots-">Try <code>cypress-plugin-snapshots</code></h3>
<p>‚ö†Ô∏è install requires 3 parts: command, plugin, env config object</p>
<pre><code class="hljs lang- stylus"><span class="line"><span class="line-number"></span><span class="hljs-function"><span class="hljs-title">it</span><span class="hljs-params">(<span class="hljs-string">'creates todos'</span>, ()</span></span> =&gt; {</span><span class="line"><span class="line-number"></span>  <span class="hljs-comment">// add a few todos</span></span><span class="line"><span class="line-number"></span>  cy.window()</span><span class="line"><span class="line-number"></span>    .its(<span class="hljs-string">'app.todos'</span>)</span><span class="line"><span class="line-number"></span>    .toMatchSnapshot()</span><span class="line"><span class="line-number"></span>})</span></code></pre>


</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><p><img src="./Custom commands_files/to-match-snapshot.png" title="" alt="toMatchSnapshot" class="toMatchSnapshot" style="width: auto;height: auto;" data-image-key="3671066854388124421"></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="todo-use-data-snapshot">Todo: use data snapshot</h2>
<ul>
<li>ignore "id" field, because it is dynamic</li>
<li>update snapshot if you add todo</li>
</ul>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="advanced-concepts">Advanced concepts</h2>
<ul>
<li>parent vs child command</li>
<li>overwriting <code>cy</code> command</li>
</ul>
<p><a href="https://on.cypress.io/custom-commands" rel="noopener noreferrer" target="_blank">on.cypress.io/custom-commands</a>, <a href="https://www.cypress.io/blog/2018/12/20/element-coverage/" rel="noopener noreferrer" target="_blank">https://www.cypress.io/blog/2018/12/20/element-coverage/</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="example-overwrite-cy-type-">Example: overwrite <code>cy.type</code></h2>
<pre><code class="hljs lang- reasonml"><span class="line"><span class="line-number"></span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Cypress</span>.</span><span class="hljs-module"><span class="hljs-identifier">Commands</span>.</span></span>overwrite('<span class="hljs-keyword">type</span>',</span><span class="line"><span class="line-number"></span> <span class="hljs-function"> (<span class="hljs-params">type</span>, <span class="hljs-params">$el</span>, <span class="hljs-params">text</span>, <span class="hljs-params">options</span>) =&gt;</span> {</span><span class="line"><span class="line-number"></span>&nbsp;</span><span class="line"><span class="line-number"></span>  <span class="hljs-comment">// just adds element selector to the</span></span><span class="line"><span class="line-number"></span>  <span class="hljs-comment">// list of seen elements</span></span><span class="line"><span class="line-number"></span>  remember<span class="hljs-constructor">Selector($<span class="hljs-params">el</span>)</span></span><span class="line"><span class="line-number"></span>&nbsp;</span><span class="line"><span class="line-number"></span>  return <span class="hljs-keyword">type</span>($el, text, options)</span><span class="line"><span class="line-number"></span>})</span></code></pre>


<p><a href="https://www.cypress.io/blog/2018/12/20/element-coverage/" rel="noopener noreferrer" target="_blank">https://www.cypress.io/blog/2018/12/20/element-coverage/</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><video data-video="true" class="Video stretch" style="width: auto; height: 0px;" data-autoplay="" src="https://www.cypress.io/blog/2018/12/20/element-coverage/tested-elements.a2124117.mp4"></video>

<p>Video of element coverage, <a href="https://slides.com/bahmutov/test-coverage-update" rel="noopener noreferrer" target="_blank">https://slides.com/bahmutov/test-coverage-update</a></p>
</section><section data-markdown="" data-markdown-parsed="true" class="future" aria-hidden="true" style="top: 350px; display: none;" hidden=""><h2 id="best-practices">Best practices</h2>
<ul class="">
<li class="fragment" data-fragment-index="0">Making reusable function is often faster than writing a custom command</li>
<li class="fragment" data-fragment-index="1">Know Cypress API to avoid writing what's already available</li>
</ul></section></section>
            
        </div>
        

<footer id="title-footer" class="footer-visible"><p id="notification" class="footer-fade"> </p></footer>


    <div class="backgrounds"><div class="slide-background past" data-background-hash="whitenullnullnullnullnullnullnullnullnull" data-loaded="true" style="background: white; display: block;"><div class="slide-background-content"></div></div><div class="slide-background stack present" data-loaded="true" style="display: block;"><div class="slide-background-content"></div><div class="slide-background present" data-loaded="true" style="display: block;"><div class="slide-background-content"></div></div><div class="slide-background future" data-loaded="true" style="display: block;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: block;" data-loaded="true"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div></div></div><div class="progress" style="display: block;"><span style="width: 44.2105px;"></span></div><aside class="controls" data-controls-layout="bottom-right" data-controls-back-arrows="faded" style="display: block;"><button class="navigate-left enabled" aria-label="previous slide"><div class="controls-arrow"></div></button><button class="navigate-right highlight" aria-label="next slide" disabled="disabled"><div class="controls-arrow"></div></button><button class="navigate-up" aria-label="above slide" disabled="disabled"><div class="controls-arrow"></div></button><button class="navigate-down enabled highlight" aria-label="below slide"><div class="controls-arrow"></div></button></aside><div class="slide-number" style="display: block;"><a href="https://gitpitch.com/cypress-io/testing-workshop-cypress?p=slides/12-custom-commands#/1"><span class="slide-number-a">2</span><span class="slide-number-delimiter">/</span><span class="slide-number-b">39</span></a></div><div class="speaker-notes" data-prevent-swipe="" tabindex="0"></div><div class="pause-overlay"><button class="resume-button">Resume presentation</button></div><div id="aria-status-div" aria-live="polite" aria-atomic="true" style="position: absolute; height: 1px; width: 1px; overflow: hidden; clip: rect(1px, 1px, 1px, 1px);">‚òÄÔ∏è Part 12: Custom commands
üìö You will learn

adding new commands to cy
supporting retry-ability
TypeScript definition for new command
useful 3rd party commands

</div></div>
    
    
    <div class="gp-menu">
      <div class="slide-menu-button">
        
        <a class="reveal" onclick="goHome(); return false;" title="Go Home" rel="noopener noreferrer" target="_blank">
          <i class="gp-menu-bars fa fa-home" aria-hidden="true"> </i>
        </a>
        
        
        <a class="reveal" onclick="toggleMenu(); return false;" title="Slide Table-of-Contents, Key=M" rel="noopener noreferrer" target="_blank">
          <i class="gp-menu-bars fa fa-bars" aria-hidden="true"> </i>
        </a>
        
      </div>
    <nav class="slide-menu slide-menu--left"><ol class="slide-menu-toolbar"><li data-button="0" class="toolbar-panel-button" data-panel="Slides"><i class="fa fa-list"></i></li><li id="close"><i class="fa fa-times"></i></li></ol><div data-panel="Slides" class="slide-menu-panel active-menu-panel"><div class="toc-title"><hr class="fade-away"></div><ul class="slide-menu-items"><li class="slide-menu-item no-title past" data-item="0" data-slide-h="0" data-slide-v="0"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 0</span></li><li class="slide-menu-item active" data-item="1" data-slide-h="1" data-slide-v="0"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">‚òÄÔ∏è Part 12: Custom commands</span></li><li class="slide-menu-item-vertical no-title future" data-item="2" data-slide-h="1" data-slide-v="1"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 2</span></li><li class="slide-menu-item-vertical future" data-item="3" data-slide-h="1" data-slide-v="2"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">üíØ Code reuse and clarity</span></li><li class="slide-menu-item-vertical future" data-item="4" data-slide-h="1" data-slide-v="3"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: move them into cypress/support/index.js</span></li><li class="slide-menu-item-vertical future" data-item="5" data-slide-h="1" data-slide-v="4"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: move them into cypress/support/hooks.js</span></li><li class="slide-menu-item-vertical future" data-item="6" data-slide-h="1" data-slide-v="5"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: export the resetData and visitSite</span></li><li class="slide-menu-item-vertical future" data-item="7" data-slide-h="1" data-slide-v="6"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">My opinion</span></li><li class="slide-menu-item-vertical no-title future" data-item="8" data-slide-h="1" data-slide-v="7"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 8</span></li><li class="slide-menu-item-vertical no-title future" data-item="9" data-slide-h="1" data-slide-v="8"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 9</span></li><li class="slide-menu-item-vertical no-title future" data-item="10" data-slide-h="1" data-slide-v="9"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 10</span></li><li class="slide-menu-item-vertical future" data-item="11" data-slide-h="1" data-slide-v="10"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Use cases for custom commands</span></li><li class="slide-menu-item-vertical no-title future" data-item="12" data-slide-h="1" data-slide-v="11"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 12</span></li><li class="slide-menu-item-vertical future" data-item="13" data-slide-h="1" data-slide-v="12"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: write and use "createTodo"</span></li><li class="slide-menu-item-vertical future" data-item="14" data-slide-h="1" data-slide-v="13"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">‚¨ÜÔ∏è Make it better</span></li><li class="slide-menu-item-vertical future" data-item="15" data-slide-h="1" data-slide-v="14"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: add createTodo to cy object</span></li><li class="slide-menu-item-vertical no-title future" data-item="16" data-slide-h="1" data-slide-v="15"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 16</span></li><li class="slide-menu-item-vertical no-title future" data-item="17" data-slide-h="1" data-slide-v="16"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 17</span></li><li class="slide-menu-item-vertical no-title future" data-item="18" data-slide-h="1" data-slide-v="17"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 18</span></li><li class="slide-menu-item-vertical no-title future" data-item="19" data-slide-h="1" data-slide-v="18"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 19</span></li><li class="slide-menu-item-vertical future" data-item="20" data-slide-h="1" data-slide-v="19"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Better Command Log</span></li><li class="slide-menu-item-vertical future" data-item="21" data-slide-h="1" data-slide-v="20"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Even better Command Log</span></li><li class="slide-menu-item-vertical no-title future" data-item="22" data-slide-h="1" data-slide-v="21"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 22</span></li><li class="slide-menu-item-vertical future" data-item="23" data-slide-h="1" data-slide-v="22"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Mark command completed</span></li><li class="slide-menu-item-vertical future" data-item="24" data-slide-h="1" data-slide-v="23"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Show result in the console</span></li><li class="slide-menu-item-vertical future" data-item="25" data-slide-h="1" data-slide-v="24"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">3rd party custom commands</span></li><li class="slide-menu-item-vertical future" data-item="26" data-slide-h="1" data-slide-v="25"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Try cypress-xpath</span></li><li class="slide-menu-item-vertical no-title future" data-item="27" data-slide-h="1" data-slide-v="26"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 27</span></li><li class="slide-menu-item-vertical future" data-item="28" data-slide-h="1" data-slide-v="27"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Custom command with retries</span></li><li class="slide-menu-item-vertical no-title future" data-item="29" data-slide-h="1" data-slide-v="28"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 29</span></li><li class="slide-menu-item-vertical future" data-item="30" data-slide-h="1" data-slide-v="29"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Try cypress-pipe</span></li><li class="slide-menu-item-vertical future" data-item="31" data-slide-h="1" data-slide-v="30"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: retry getting object's property</span></li><li class="slide-menu-item-vertical future" data-item="32" data-slide-h="1" data-slide-v="31"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Try cypress-plugin-snapshots</span></li><li class="slide-menu-item-vertical no-title future" data-item="33" data-slide-h="1" data-slide-v="32"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 33</span></li><li class="slide-menu-item-vertical future" data-item="34" data-slide-h="1" data-slide-v="33"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Todo: use data snapshot</span></li><li class="slide-menu-item-vertical future" data-item="35" data-slide-h="1" data-slide-v="34"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Advanced concepts</span></li><li class="slide-menu-item-vertical future" data-item="36" data-slide-h="1" data-slide-v="35"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Example: overwrite cy.type</span></li><li class="slide-menu-item-vertical no-title future" data-item="37" data-slide-h="1" data-slide-v="36"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Slide 37</span></li><li class="slide-menu-item-vertical future" data-item="38" data-slide-h="1" data-slide-v="37"><i class="fa fa-check-circle past"></i><i class="fa fa-dot-circle-o active"></i><i class="fa fa-circle-thin future"></i><span class="slide-menu-item-title">Best practices</span></li></ul></div></nav><div class="slide-menu-overlay"></div></div>
    
    
    <script src="./Custom commands_files/reveal.js"></script>
    <script src="./Custom commands_files/jquery.min.js"></script>
    
    
    

    <script>
        Reveal.initialize({
            
            controls: true,
            
            controlsLayout: 'bottom-right',
            progress: true,
            embedded: true,
            margin: 0.0,
            
            
            showNotes: false,
            transition: 'none',
            backgroundTransition: 'none',
            autoSlide: 0,
            loop: false,
            center: true,
            rtl: false,
            shuffle: false,
            mouseWheel: false,
            
            controlsTutorial: true,
            
            
            
              slideNumber: 'c/t', // slideNumber: false,
            
            history: true,
            
            
            menu: {
              custom: [],
              path : "/assets/libs/slides/plugin/menu",
              themes : false,
              transitions:  false,
              markers: true,
              sticky: true,
              autoOpen: true
            },
            
            
            dependencies: [
                { src: "/assets/libs/slides/plugin/markdown/marked.js",
                  condition: function() {
                    return !!document.querySelector( '[data-markdown]' );
                  }},
                { src: "/assets/libs/slides/plugin/markdown/markdown.js",
                condition: function() {
                  return !!document.querySelector( '[data-markdown]' );
                }},
                
                { src:"/assets/libs/slides/plugin/menu/menu.js",
                  async: true},
                
                
                
                
                { src: '/assets/libs/highlight.js/9.15.8/highlight.js', async: true },
                
                { src: '/assets/libs/highlight.js/9.15.8/reveal-code-focus-30.js',
                  async: true,
                  callback: function() {
                    RevealCodeFocus();
                  }
                },
                
                
                
                
                
            ]
        });

        Reveal.addEventListener('ready', function(evt) {

          if(typeof twtter !== "undefined") {
              twttr.widgets.load();
          }

          upgradeAnchors();
          pushFootnoteNotification();

          // Force refresh to workaround Reveal.js 3.8.0
          // first render problem re. scrollHeight calc
          // for slides with non-text (image) content.
          setTimeout(Reveal.layout, 500);
        });

        
        Reveal.addEventListener('menu-ready', function(evt) {
            toggleMenuOff();
        });
        

        Reveal.addEventListener('slidechanged', function(evt) {
          /*
          if (evt.indexh === 0 && evt.indexv === 0) {
            pushHelpNotification();
          } else {
            pushFootnoteNotification();
          }
          */
          pushFootnoteNotification();
        });

        Reveal.configure({
            keyboard: {
                88: function() { // bind "x" key to "select" code block content

                    var currentSlide = Reveal.getCurrentSlide();
                    var preBlock = $(currentSlide).find("pre");

                    if(preBlock.length > 0) {

                        if (window.getSelection) {
                            var range = document.createRange();
                            range.selectNodeContents(preBlock[0]);
                            var selection = window.getSelection();
                            selection.removeAllRanges();
                            selection.addRange(range);
                        }
                    }
                }
            }
        });

        function goHome() {
            window.location.href = "https://gitpitch.com";
        }

        function enterFullscreen() {
            Reveal.triggerKey(70);
        };

        function enterOverview() {
            Reveal.toggleOverview();
        };

        function enterBlackout() {
            Reveal.togglePause();
        };

        function toggleHelp() {
          Reveal.toggleHelp();
        }

        function enableEvents() {
            Reveal.addEventListeners();
        };

        function disableEvents() {
            Reveal.removeEventListeners();
        };

        function toggleMenuOff() {
            if(RevealMenu && RevealMenu.isOpen()) {
                RevealMenu.toggle();
            }
        }

        function toggleMenu() {
            if(RevealMenu) {
                RevealMenu.toggle();
            }
        }

        function upgradeAnchors() {
            Array.from(document.getElementsByTagName('a')).forEach($link => {
              if ($link.hostname !== window.location.hostname) {
                $link.setAttribute('rel', 'noopener noreferrer');
                $link.setAttribute('target', '_blank');
              }
            });
        }

    </script>

    

    

<script>
    function pushNotification(msg, fade) {
      var footer = document.getElementById('title-footer')
      var notification = document.getElementById('notification')
      if(window.innerWidth < 700) {
        footer.className = "footer-hidden";
      } else {
          footer.className = "footer-visible";
          if(fade) {
            notification.className = "footer-fade";
            notification.innerHTML = msg;
          } else {
            notification.className = "footer-hard";
            notification.innerHTML = msg;
          }
      }
    };

    function pushHelpNotification() {
      if(window.innerWidth < 700)
        pushNotification("<a href='#' onclick='RevealMenu.toggle()'>Menu</a> | <a href='#' onclick='enterFullscreen()'>Fullscreen</a> | <a href='#' onclick='enterOverview()'>Overview</a> | <a href='#' onclick='enterBlackout()'>Blackout</a> | <a href='#' onclick='RevealNotes.open()'>Speaker</a> | <a href='#' onclick='enterHelp()'>Help</a>");
      else
        pushNotification("Navigate : Space / Arrow Keys | <a href='#' onclick='RevealMenu.toggle()'>M</a> - Menu | <a href='#' onclick='enterFullscreen()'>F</a> - Fullscreen | <a href='#' onclick='enterOverview()'>O</a> - Overview | <a href='#' onclick='enterBlackout()'>B</a> - Blackout | <a href='#' onclick='RevealNotes.open()'>S</a> - Speaker | <a href='#' onclick='enterHelp()'>?</a> - Help");
    }

    function pushFootnoteNotification() {
      
        pushNotification(" ", true);
      
    }

    function pushCodePresentingStepNotification(step, frags) {
      // pushNotification("Code Presenting - Step " + step + " / " + frags, true);
    }
</script>





</body></html>